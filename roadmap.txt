                        General roadmap:
        I am adding and removing stuff __daily__, so to leave only 
        "essential" and most helpful things. Consider this file 
        draft. While I am not sorry for "wasting" my time on "bad" 
        courses and books, I wont list any of them here. 

-----------------Stage 1 (software engineering and CS)--------------------
--------------------------------------------------------------------------
Python (draft)
    Python I (draft)
    ----------------------------------------------------------------------
    [x] - byte of python
    [x] - Automate the Boring Stuff with Python
    [x] - the art and craft of programming python
    [x] - dive in python (partially)
    [ ] - thinkcspython3
    [ ] - Learning Python 5th Edition (A comprehensive language 
                    foundations tutorial 1640 pages, [3.3, 2.7])
    [ ] - Learn More Python 3 the Hard Way (pair with learning python book)
    [ ] - how to make mistakes in python
    [ ] - tutorial and other https://docs.python.org/3/index.html
    [x] - PEP 8
    [ ] - Google Python Style Guide
    
    Python II (draft)
    ----------------------------------------------------------------------
    [ ] - hitch hikers guide to python
    [ ] - https://docs.python.org/3.6/tutorial/index.html ?
    [ ] - programming python (hard, A full-scale applications programming tutorial 1630 pages [3.2])
    [ ] - fluent python ( A great intermediate Python book for those looking for the next step.)
    [ ] - effective python ( Also a great intermediate Python book for those looking for the next step.)
    [ ] - python cookbook
    [ ] - Python Pocket Reference, 5th Edition (A reference supplement to the learning&programming 
    [ ]         python, 260 pages (January 2014) [3.4, 2.7])
    [ ] - stackoverflow.com/questions/2573135 ?
    [ ] - reddit.com/r/Python/comments/1knw7z ?
    [ ] - reddit.com/r/Python/comments/7cs8dq ?
    [ ] - stackoverflow.com/questions/101268/hidden-features-of-python ?


C plus plus (draft)
    Reference Style - All Levels
    - the c++ programing lang ? (more of a all level reference)
    - C++ Standard Library Tutorial and Reference (Nicolai Josuttis)

    Cpp I (reviewed, finalised)
    ----------------------------------------------------------------------
    [x] - beginning c++ tgp
    [x] - mit introduction to c++
    [ ] - Udemy c++ tutorial for beginners
    [x] - Udacity c++ for programmers  
    [ ] - think like computer scientist cpp
    [ ] - udemy advanced c++
    [ ] - Programming - Principles and Practice Using C++
    [ ] - c++ primer (covers just about everything in the language)
    [ ] - http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
    [x] - https://google.github.io/styleguide/cppguide.html

    Cpp II (reviewed)
    ----------------------------------------------------------------------
    //Introductory, with previous programming experience
    [ ] - a tour of c++  ( tutorial overview of all of standard C++)
    [ ] - accelerated c++ (covers tour on 1/4 of space)
    //Best practices
    [ ] - Effective Modern C++ (Scott Meyers) 
    [ ] - Effective STL (Scott Meyers) 
    //Intermediate
    [ ] - More Effective C++ (Scott Meyers) 
    [ ] - Exceptional C++ (Herb Sutter) 
    [ ] - More Exceptional C++ (Herb Sutter) 
    [ ] - Exceptional C++ Style (Herb Sutter)
    [ ] - C++ Coding Standards (Herb Sutter and Andrei Alexandrescu) 
    //Advanced
    [ ] - Modern C++ Design (Andrei Alexandrescu) 
    [ ] - C++ Concurrency In Action (Anthony Williams)

    Other (for review)
    - thinking in c++ v1 & v2? (6-10 months)
    - Object-Oriented Programming in C++ ? (three months)
    - http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf

C (draft)
    [ ] - K&R C
    [ ] - Expert C Programming: Deep C Secrets
    [ ] - hacking art of exploitation
    
    - ? cs 50


Lisp(es) (draft)
    [ ] - The Little Schemer - Introduction to Scheme and functional programming in general
    [ ] - The Seasoned Schemer - Followup to Little Schemer.
    [ ] - Structure and Interpretation of Computer Programs ( The definitive book on Lisp )
    
    - ? Practical Common Lisp - A good introduction to Lisp with several examples of practical use.
    - ? On Lisp - Advanced Topics in Lisp
    - ? How to Design Programs - An Introduction to Computing and Programming
    - ? Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp - an approach to high quality Lisp programming


DS&A (draft)
    [ ] - Grokking Algorithms
    [ ] - Data Structures and Algorithms in Python
    [ ] - Introduction to algorithms
    ? - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/index.htm
    ? - https://www.coursera.org/specializations/algorithms
    ? - Data Structures and Algorithms in C++ (very hard book if no previous ds&a knowledge)
    ? (fill me in)https://github.com/prakhar1989/awesome-courses/blob/master/README.md#algorithms


General CS books (draft)
    [x] - Code: The Hidden Language of Computer Hardware and Software       
    [ ] - Joel on Software: And on Diverse and Occasionally...
    [ ] - The Mythical Man-Month
    [ ] - Programming Pearls
    
    [ ] - Head First Design Patterns by Eric Freeman (1-2 weeks)
    [ ] - User Interface Design for Programmers by Joel Spolsky (three days)
    [ ] - Debugging: The 9 Indispensable Rules ... (2 weeks)
    [ ] - Code Reading: The Open Source Perspective (2 months for whole)

    [ ] - Code Complete: A Practical Handbook of Software Construction
    [ ] - Clean Code: A Handbook of Agile Software Craftsmanship
    [ ] - The Clean Coder: A Code of Conduct for Professional Programmers
    [ ] - Design Patterns: Elements of Reusable Object-Oriented Software
    [ ] - The Pragmatic Programmer: From Journeyman to Master

    [ ] - Refactoring: Improving the Design of Existing Code
    [ ] - Working Effectively with Legacy Code
    [ ] - Head First Software Development by Dan Pilone (days to weeks)
    [ ] - The Practice of Programming by Brian W. Kernighan (quick read)
    [ ] - Agile Software Development, ... by Robert C. Martin (read carefully, its important)
    [ ] - Clean Code: A Handbook of Agile Software Craftsmanship (companion to previos one)

    [ ] - Patterns of Enterprise Application Architecture
    [ ] - Peopleware: Productive Projects and Teams


Drafts
    Java (draft)
        ? - Head First Java - Recommended as a great introductory text by Patrick Lozzi.
        ? - Effective Java - Recommended by pek as a great intermediate text.
        ? - Core Java Volume 1 and Core Java Volume 2 - Suggested by FreeMemory as some of the best java references available.
        ? - Java Concurrency in Practice - Recommended by MDC as great resource for concurrent programming in Java.
        
    C# (draft)
        ? - the yellow book
        
    Big data, machine learning and data mining
        ? - https://metacademy.org/roadmaps/
        ? - https://github.com/prakhar1989/awesome-courses
        ? - https://medium.com/@thisismetis/roadmap-how-to-learn-machine-learning-in-6-months-7c501889b545
        ? - https://machinelearningmastery.com/machine-learning-roadmap-your-self-study-guide-to-machine-learning/
        ? - https://www.analyticsvidhya.com/blog/2017/01/the-most-comprehensive-data-science-learning-plan-for-2017/
        ? - https://viblo.asia/p/beginning-machine-learning-series-roadmap-bJzKmWVXl9N
        ? - https://www.technologyreview.com/s/604037/meet-the-guys-who-sold-neuralink-to-elon-musk-without-even-realizing-it/

    Unsorted
        ? - The Self-taught Programmer by Cory Althoff
        ? - TCP/IP Sockets in C (about week)   
        ? - The Practice of Programming
        ? - Linux System Programming: Talking Directly to the Kernel and C Library
        ? - The Art of UNIX Programming

    Courses *hit    
        ? - Computer Science Distilled: Learn the Art...
        ? - edx Introduction to Computer Science and Programming using Python
        ? - https://sourcemaking.com/design_patterns
        ? - https://www.cs.hmc.edu/csforall/#indices-and-tables

        ? - cs part: https://github.com/prakhar1989/awesome-courses
        ? - https://github.com/ossu/computer-science#introduction-to-computer-science
        ? - https://github.com/ossu/computer-science#core-cs
        ? - https://github.com/ossu/computer-science#core-math
        ? - https://github.com/ossu/computer-science#core-systems
        ? - https://github.com/ossu/computer-science#core-theory
        ? - https://github.com/ossu/computer-science#core-applications
        ? - https://github.com/ossu/computer-science#advanced-cs
        ? - https://github.com/ossu/computer-science#pro-cs

    Misc (summer)
        - basic HTML, CSS, JavaScript, powershell
            https://nodeschool.io/, fcc, top
        - how to use linux and bash
        - how to setup and automate your development enviroment
        - ? xlearning.com/skils/5545 (zsh, tmux, vim)
        - ? nand2tetris***




-------------------stage 2 (domain specific learning)--------------------
--------------------------------------------------------------------------
http://hubel.med.harvard.edu/index.html
https://en.wikipedia.org/wiki/Cyberware
https://en.wikipedia.org/wiki/Category:Cybernetics
https://en.wikipedia.org/wiki/Category:Learning
https://en.wikipedia.org/wiki/Category:Education
https://en.wikipedia.org/wiki/Category:Behavior_modification
https://en.wikipedia.org/wiki/Category:Cognition
https://en.wikipedia.org/wiki/Category:Memory


-------------------stage 3 (proto-science and research)-------------------
--------------------------------------------------------------------------
- google patents
- research papers (sci hub)
- research gate 
- google scholar




_____________________________________________________
----------------additional resources-----------------
- cheatsheets
    - devhints.io
    - learnxinyminutes
    - http://overapi.com/
    - https://www.rstudio.com/resources/cheatsheets/
    - https://github.com/detailyang/awesome-cheatsheet

- blogs
    - nedbatchelder.com

- riptutorial/stackoverflow docs
- https://techdevguide.withgoogle.com/
- https://www.fullstackpython.com/table-of-contents.html
- https://software-carpentry.org/lessons/
- https://metacademy.org/roadmaps/
- https://ocw.mit.edu/courses/find-by-topic/#cat=engineering&subcat=computerscience&spec=programminglanguages
_____________________________________________________