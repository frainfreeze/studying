                            General roadmap:
        I am adding and removing stuff __daily__, so to leave only 
        "essential" and most helpful things. Consider this file 
        draft. While I am not sorry for "wasting" my time on "bad" 
        courses and books, I wont list any of them here. 

-----------------Stage 1 (software engineering and CS)--------------------
--------------------------------------------------------------------------
Python
    Meta
    - pep8, google style guide
    - Hitch hikers guide to python
    - Python Pocket Reference, 5th Edition

    Intro
    [x] - Automate the Boring Stuff with Python (free)
    [x] - byte of python (free)
    [x] - How to Think Like a Computer Scientist: Learning with Python 3 (free)
    [x] - The Self-taught Programmer by Cory Althoff

    Medium (draft)
    [x] - dive in python (partially) (free)
    [ ] - Learning Python 5th Edition (A comprehensive language foundations tutorial 1640pg, [3.3, 2.7])
    [ ] - How to make mistakes in python

    Advanced (draft)
    [ ] - programming python (hard, A full-scale applications programming tutorial 1630 pages [3.2])
    [ ] - python cookbook (for experienced Python programmers who want to focus on modern tools and idioms)    
    [ ] - fluent python (A great intermediate Python book for those looking for the next step.)
    [ ] - effective python (Also a great intermediate Python book for those looking for the next step.)
    
    Miscellaneous (draft)
    [ ] - tutorial and other https://docs.python.org/3/index.html (free)
    [ ] - stackoverflow.com/questions/2573135 (Python progression path - From apprentice to guru)
    [ ] - reddit.com/r/Python/comments/1knw7z (Python interview questions)
    [ ] - reddit.com/r/Python/comments/7cs8dq (Senior Python Programmer tricks)
    [ ] - stackoverflow.com/questions/101268  (Hidden features of Python)


C plus plus (draft)
    Reference Style - All Levels
    - the c++ programing lang (all level reference)
    - C++ Standard Library Tutorial and Reference (Nicolai Josuttis)

    Intro
    [x] - beginning c++ tgp
    [x] - mit introduction to c++ (free)
    [ ] - Udemy c++ tutorial for beginners (free)
    [x] - Udacity c++ for programmers (free)
    
    Medium
    [ ] - udemy advanced c++
    [ ] - Programming - Principles and Practice Using C++
    [ ] - c++ primer* (covers just about everything in the language)
    [ ] - a tour of c++  ( tutorial overview of all of standard C++)
    [ ] - accelerated c++ (covers tour on 1/4 of space)
    
    Intermediate
    [ ] - More Effective C++ (Scott Meyers) 
    [ ] - Exceptional C++ (Herb Sutter) 
    [ ] - More Exceptional C++ (Herb Sutter) 
    [ ] - Exceptional C++ Style (Herb Sutter)
    [ ] - C++ Coding Standards (Herb Sutter and Andrei Alexandrescu) 
    
    Advanced
    [ ] - Modern C++ Design (Andrei Alexandrescu) 
    [ ] - C++ Concurrency In Action (Anthony Williams)

    Best practices
    [ ] - Effective Modern C++ (Scott Meyers) 
    [ ] - Effective STL (Scott Meyers) 
    
    Other (for review)
    - thinking in c++ v1 & v2? (6-10 months)
    - Object-Oriented Programming in C++ ? (three months)
    - http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf
    [ ] - http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
    [x] - https://google.github.io/styleguide/cppguide.html


Web development (draft)
    [ ] - roadmap https://github.com/kamranahmedse/developer-roadmap#-introduction
    [ ] - html https://github.com/denysdovhan/learnyouhtml#readme
    [ ] - web dev https://www.theodinproject.com/courses
    [ ] - web dev https://learn.freecodecamp.org/
    [ ] - javascript https://github.com/workshopper/javascripting#javascripting
    [ ] - javascript https://eloquentjavascript.net/
    [ ] - Beginning JavaScript 4th Edition 978-0470525937


C language
    [ ] - K&R C
    [ ] - Expert C Programming: Deep C Secrets
    [ ] - hacking art of exploitation


Lua
    [ ] - Programming In Lua
     - that's it, just read lots of source code now.


Lisp(es) (draft)
    [ ] - The Little Schemer - Introduction to Scheme and functional programming in general
    [ ] - Structure and Interpretation of Computer Programs ( The definitive book on Lisp )
    
    Other (for review)
    [ ] - The Seasoned Schemer - Followup to Little Schemer.
    - Practical Common Lisp - A good introduction to Lisp with several examples of practical use.
    - On Lisp - Advanced Topics in Lisp
    - How to Design Programs - An Introduction to Computing and Programming
    - Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp - an approach to high quality Lisp programming


Clojure (draft)
    Meta
    - https://github.com/matthiasn/Clojure-Resources

    [ ] - Clojure for the Brave and True
    [ ] - Clojure in Action, Amit Rathore, 2011.
    [ ] - Practical Clojure, L. VanderHart, S. Sierra, 2010.
    [ ] - http://clojure-doc.org/

DS&A (draft)
        [ ] - Grokking Algorithms
        [ ] - https://interactivepython.org/runestone/static/pythonds/index.html
        [ ] - Data Structures and Algorithms in Python
        [ ] - Introduction to algorithms (SMA 5503, 6.046J / 18.410J )
        [ ] - Data Structures and Algorithms in C++ (very hard book if no previous ds&a knowledge)
        ? - https://www.coursera.org/specializations/algorithms
        ? (fill me in)https://github.com/prakhar1989/awesome-courses/blob/master/README.md#algorithms

General CS books
    [x] - Code: The Hidden Language of Computer Hardware and Software       
    [ ] - Joel on Software: And on Diverse and Occasionally...
    [ ] - The Mythical Man-Month
    [ ] - Programming Pearls
    
    [ ] - Head First Design Patterns by Eric Freeman (1-2 weeks)
    [ ] - User Interface Design for Programmers by Joel Spolsky (three days)
    [ ] - Debugging: The 9 Indispensable Rules ... (2 weeks)
    [ ] - Code Reading: The Open Source Perspective (2 months for whole)

    [ ] - Code Complete: A Practical Handbook of Software Construction
    [ ] - Clean Code: A Handbook of Agile Software Craftsmanship
    [ ] - The Clean Coder: A Code of Conduct for Professional Programmers
    [ ] - Design Patterns: Elements of Reusable Object-Oriented Software
    [ ] - The Pragmatic Programmer: From Journeyman to Master

    [ ] - Refactoring: Improving the Design of Existing Code
    [ ] - Working Effectively with Legacy Code
    [ ] - Head First Software Development by Dan Pilone (days to weeks)
    [ ] - The Practice of Programming by Brian W. Kernighan (quick read)
    [ ] - Agile Software Development, ... by Robert C. Martin (read carefully, its important)
    [ ] - Clean Code: A Handbook of Agile Software Craftsmanship (companion to previos one)

    [ ] - Patterns of Enterprise Application Architecture
    [ ] - Peopleware: Productive Projects and Teams

Unix/Linux/tools etc
    Vim
        Cheatsheet- https://vim.rtorr.com/
        [ ] - vimtutor
        [ ] - http://moolenaar.net/habits.html
        [ ] - https://yanpritzker.com/learn-to-speak-vim-verbs-nouns-and-modifiers-d7bfed1f6b2d
        [ ] - http://stevelosh.com/blog/2010/09/coming-home-to-vim/

    Shell (draft)
        [ ] - https://swcarpentry.github.io/shell-novice/
        [ ] - https://swcarpentry.github.io/shell-extras/

    Git (draft)
        [ ] - https://swcarpentry.github.io/git-novice/
        [ ] - https://git-scm.com/book/en/v2
        [ ] - https://documentup.com/skwp/git-workflows-book
        [ ] - http://eagain.net/articles/git-for-computer-scientists/
        [ ] - https://maryrosecook.com/blog/post/git-from-the-inside-out        

scratchpad
----------------------------------------------------------
    Java
        ? - Head First Java - Recommended as a great introductory text by Patrick Lozzi.
        ? - Effective Java - Recommended by pek as a great intermediate text.
        ? - Core Java Volume 1 and Core Java Volume 2 - Suggested by FreeMemory as some of the best java references available.
        ? - Java Concurrency in Practice - Recommended by MDC as great resource for concurrent programming in Java.
        
    C#
        ? - the yellow book

    Unix/linux/tools
        ? - Linux System Programming: Talking Directly to the Kernel and C Library
        ? - The Art of UNIX Programming
        ? - zsh, tmux

    Big data, machine learning and data mining
        ? - http://aima.cs.berkeley.edu/
        ? - https://github.com/norvig/paip-lisp
        ? - https://metacademy.org/roadmaps/
        ? - https://github.com/prakhar1989/awesome-courses
        ? - https://medium.com/@thisismetis/roadmap-how-to-learn-machine-learning-in-6-months-7c501889b545
        ? - https://machinelearningmastery.com/machine-learning-roadmap-your-self-study-guide-to-machine-learning/
        ? - https://www.analyticsvidhya.com/blog/2017/01/the-most-comprehensive-data-science-learning-plan-for-2017/
        ? - https://viblo.asia/p/beginning-machine-learning-series-roadmap-bJzKmWVXl9N
        ? - https://www.technologyreview.com/s/604037/meet-the-guys-who-sold-neuralink-to-elon-musk-without-even-realizing-it/

    Unsorted
        ? - TCP/IP Sockets in C (about week) (networking)
        ? - The Practice of Programming
        ? - Design Patterns: Elements of Reusable Object-Oriented Software 978-0201633610
        ? - New Turing Omnibus (New Turning Omnibus : 66 Excursions in Computer Science) 978-0716782711
        ? - The Art of Computer Programming 0-201-03801-3
        ? - Pragmatic Thinking and Learning 978-1-93435-605-0

    Courses *hit    
        ? - https://sourcemaking.com/design_patterns
        ? - https://www.cs.hmc.edu/csforall/#indices-and-tables
        ? - cs part: https://github.com/prakhar1989/awesome-courses
        ? - https://github.com/ossu/computer-science
----------------------------------------------------------


Rough deadlines
Summer1: 1.10. Web Dev I, Python medium, C++ intro

Uni 2 s3: Python advanced, C++ medium, Java
Uni 2 s4: Python advanced, C#, start big data, ML, DS&A

Uni 3 s5: C++ intermediate, C, lisp, big data, ML
Uni 3 s6: C++ best practices, lua, clojure, big data, ML