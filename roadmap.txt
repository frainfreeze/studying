General roadmap:
I am adding and removing stuff __daily__, so to leave only 
"essential" and most helpfull things. Consider this file 
draft. Wile I am not sorry for "wasting" my time on "bad" 
courses and books, I wont list any of them here. 


stage 1 (software engineering and CS) (draft) (1.10.'18)
--------------------------------------------------------------------------
lvl 0 - entry+basics
Desc:
    You should be comfortable with all the things programmers 
    use on a daily basis. In particular:
        - basic syntax: statements and expressions, comments, variables
        - data types, control structures
        - Be able to decompose your code into functions
            and understand why it is a good idea to do so
        - data structures and algorithms
        - Know the language's common idioms and paradigms
        - Know the basic guidelines of good coding style
        - Be able to use a debugger

    Additionaly you will learn:
        - imperative, procedural, functional and object oriented programming
        - manual memory management, basic data structures and algorithms
        - Python, C++, SQL, basic HTML, CSS, JavaScript, powershell and bash
        - how to use linux and setup and automate your development enviroment
        - and many more!
___________________________________
lvl 0 timeline:
###################################
[ ] - Python I (25.3.)
[ ] - C++ I, Other I (31.3.)
[ ] - Python II, Other II (29.4.)
[ ] - C++ II, Python III (29.7.)
[ ] - Misc I, DS&A I (1.9.)
[ ] - Misc II, DS&A II, Other III (1.10.)
###################################

Python
    Python I (do 25.3.)
    -----------------------------------
    [ ] - byte of python
    [ ] - Automate the Boring Stuff with Python
    [ ] - the art and craft of programming python
        
    Python II (29.4.)
    -----------------------------------
    [ ] - dive in python (partialy)
    [ ] - PEP 8
    [ ] - thinkcspython3
    [ ] - Google Python Style Guide

    Python III (29.7.)
    -----------------------------------
    [ ] - Learning Python 5th Edition (A comprehensive language 
                    foundations tutorial 1640 pages, [3.3, 2.7])
    [ ] - Learn More Python 3 the Hard Way (pair with learning python book)
    [ ] - how to make mistakes in python
    [ ] - tutorial and other https://docs.python.org/3/index.html

C++
    Cplusplus I (do 31.3.)
    -----------------------------------
    [ ] - beggining c++ tgp
    [ ] - mit introduction to c++
    [ ] - Udemy c++ tutorial for beginners
    [ ] - Udacity c++ for programmers
    [ ] - https://google.github.io/styleguide/cppguide.html

    Cplusplus II (do 29.7.)
    -----------------------------------
    [ ] - think like computer scientist cpp
    [ ] - http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
    [ ] - udemy advanced c++
    [ ] - Programming - Principles and Practice Using C++
    [ ] - c++ primer (covers just about everything in the language)
    
Other
    Other I (do 31.3..)
    [ ] - https://www.cs.hmc.edu/csforall/#indices-and-tables
    [ ] - edx Introduction to Computer Science and Programming using Python       
    [ ] - The Self-taught Programmer by Cory Althoff

    Other II (do 29.4.)
    [ ] - Computer Science Distilled: Learn the Art...
    [ ] - Code: The Hidden Language of Computer Hardware and Software
    ? - https://github.com/ossu/computer-science#introduction-to-computer-science
    
    Other III (do 1.10.)
    [ ] - Joel on Software: And on Diverse and Occasionally...
    [ ] - The Mythical Man-Month
    [ ] - Programming Pearls


DS&A 
    summer.
    - Grokking Algorithms
    - Data Structures and Algorithms in Python
    - Introduction to algorithms
    - Data Structures and Algorithms in C++ 
        (very hard book if no previous ds&a knowledge)
    (fill me in)https://github.com/prakhar1989/awesome-courses/blob/master/README.md#algorithms
        
Misc I (summer)
    - basic HTML, CSS, JavaScript, powershell
    
Misc II (summer)
    - how to use linux and bash
    - how to setup and automate your development enviroment
    - ? xlearning.com/skils/5545 (zsh, tmux, vim)
    - ? nand2tetris***
--------------------------------------------------------------------------

__________________________________________________________________________
lvl 1 - advanced (draft) (1.1.'20-22?)
    - python
        - hitch hikers guide to python
        - https://docs.python.org/3.6/tutorial/index.html ?
        - programming python (hard, A full-scale applications programming tutorial 1630 pages [3.2])
        - fluent python ( A great intermediate Python book for those looking for the next step.)
        - effective python ( Also a great intermediate Python book for those looking for the next step.)
        - python cookbook
        - Python Pocket Reference, 5th Edition (A reference supplement to the learning&programming 
                python, 260 pages (January 2014) [3.4, 2.7])

        - stackoverflow.com/questions/2573135 ?
        - reddit.com/r/Python/comments/1knw7z ?
        - reddit.com/r/Python/comments/7cs8dq ?
        - stackoverflow.com/questions/101268/hidden-features-of-python ?
    
    - c++
        - http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf
        - udemy advanced c++ course ? ()
        - a tour of c++ ? ( tutorial overview of all of standard C++)
        - accelerated c++? (covers tour on 1/4 of space)
        - the c++ programing lang ? (more of a all level reference)
        - Object-Oriented Programming in C++ ? (three months)
        - thinking in c++ v1 & v2? (6-10 months)
    
    - java/c#
    
    - machine learning and AI 
        - https://metacademy.org/roadmaps/
        - https://github.com/prakhar1989/awesome-courses
        - https://medium.com/@thisismetis/roadmap-how-to-learn-machine-learning-in-6-months-7c501889b545
        - https://machinelearningmastery.com/machine-learning-roadmap-your-self-study-guide-to-machine-learning/
        - https://www.analyticsvidhya.com/blog/2017/01/the-most-comprehensive-data-science-learning-plan-for-2017/
        - https://viblo.asia/p/beginning-machine-learning-series-roadmap-bJzKmWVXl9N
        - https://www.technologyreview.com/s/604037/meet-the-guys-who-sold-neuralink-to-elon-musk-without-even-realizing-it/

    - hm
        - cs part: https://github.com/prakhar1989/awesome-courses
        - https://github.com/ossu/computer-science#core-cs
        - https://github.com/ossu/computer-science#core-math
        - https://github.com/ossu/computer-science#core-systems
        - https://github.com/ossu/computer-science#core-theory
        - https://github.com/ossu/computer-science#core-applications

    - other
        - https://sourcemaking.com/design_patterns
        - Head First Design Patterns by Eric Freeman (1-2 weeks)
        - User Interface Design for Programmers by Joel Spolsky (three days)
        - Debugging: The 9 Indispensable Rules ... (2 weeks)
        - Code Reading: The Open Source Perspective (2 months for whole)
        - TCP/IP Sockets in C (about week)
--------------------------------------------------------------------------

__________________________________________________________________________
lvl 2 - polishing (draft) (1.1.'23?)
    - c
        - cs 50
        - hacking art of exploitation
        - effective modern c++?

    - hm
        - https://github.com/ossu/computer-science#advanced-cs
        - https://github.com/ossu/computer-science#pro-cs

    - other
        - Code Complete: A Practical Handbook of Software Construction
        - Clean Code: A Handbook of Agile Software Craftsmanship
        - The Clean Coder: A Code of Conduct for Professional Programmers
        - Design Patterns: Elements of Reusable Object-Oriented Software
        - The Pragmatic Programmer: From Journeyman to Master
--------------------------------------------------------------------------

__________________________________________________________________________
lvl 3 - senior (draft) (1.1.'25-'27?)
    - lisp
        - Structure and Interpretation of Computer Programs
        
    - other    
        - Refactoring: Improving the Design of Existing Code
        - Working Effectively with Legacy Code
        - Head First Software Development by Dan Pilone (days to weeks)
        - The Practice of Programming by Brian W. Kernighan (quick read)
        - Agile Software Development, ... by Robert C. Martin (read carefully, its important)
        - Clean Code: A Handbook of Agile Software Craftsmanship (companion to previos one)
    
    - senior++
        - Patterns of Enterprise Application Architecture
        - Peopleware: Productive Projects and Teams


stage 2 (domain specific knowledge)
-----------------------------------------------------
http://hubel.med.harvard.edu/index.html
https://en.wikipedia.org/wiki/Cyberware

stage 3 (proto-science and research)
-----------------------------------------------------
- google patents
- research papers (sci hub)
- research gate 
- google schoolar

_____________________________________________________
----------------additional resources-----------------

- https://github.com/prakhar1989/awesome-courses
- cheatsheets
    - devhints.io
    - learnxinyminutes
    - http://overapi.com/
    - https://www.rstudio.com/resources/cheatsheets/
    - https://github.com/detailyang/awesome-cheatsheet
- blogs
    - nedbatchelder.com
- riptutorial/stackoverflow docs
- https://techdevguide.withgoogle.com/
https://www.fullstackpython.com/table-of-contents.html

https://software-carpentry.org/lessons/
https://metacademy.org/roadmaps/
_____________________________________________________